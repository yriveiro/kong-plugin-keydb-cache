version: "3.9"

x-kong-config: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: kong
  KONG_PG_HOST: db
  KONG_PG_USER: kong
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
  KONG_PLUGINS: remote-cache
  KONG_LOG_LEVEL: debug

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  kong-net:
    external: false

services:
  kong-migrations:
    image: kong-dev:latest
    command: kong migrations bootstrap
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
  kong-migrations-up:
    image: kong-dev:latest
    command: kong migrations up && kong migrations finish
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
  kong:
    image: kong-dev:latest # This image is local
    user: kong
    profiles: ["dev"]
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: /var/run/kong
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yaml
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "0.0.0.0:8000:8000/tcp"
      - "0.0.0.0:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8002:8002/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:/var/run/kong
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong
    security_opt:
      - no-new-privileges
  db:
    image: postgres:14.9-alpine
    profiles: ["database", "dev"]
    platform: linux/amd64
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "kong", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
  keydb-01:
    image: dalongrong/keydb:modjs
    profiles: ["dev"]
    restart: on-failure:5
    networks:
      - kong-net
    ports:
      - "0.0.0.0:6379:6379/tcp"
  keydb-02:
    profiles: ["dev"]
    image: dalongrong/keydb:modjs
    restart: on-failure:5
    networks:
      - kong-net
    ports:
      - "0.0.0.0:6380:6379/tcp"
  echo-server:
    image: ealen/echo-server:0.8.12
    profiles: ["dev"]
    platform: linux/amd64
    environment:
      - ENABLE__ENVIRONMENT=false
    ports:
      - 0.0.0.0:7090:80/tcp
    networks:
      - kong-net
secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD
